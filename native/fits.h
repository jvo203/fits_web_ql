//
// native/fits.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#ifndef ISPC_NATIVE_FITS_H
#define ISPC_NATIVE_FITS_H

#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void bilinear_resize(int8_t * src, int32_t src_len, int8_t * dst, int32_t dst_len, int32_t src_width, int32_t src_height, uint32_t dst_width, uint32_t dst_height, float scale_factor, float filter_width);
    extern float calculate_radial_spectrumF16(int16_t * cubeData, float bzero, float bscale, float datamin, float datamax, uint32_t width, int32_t x1, int32_t x2, int32_t y1, int32_t y2, int32_t cx, int32_t cy, int32_t r2, bool average, float cdelt3);
    extern float calculate_square_spectrumF16(int16_t * cubeData, float bzero, float bscale, float datamin, float datamax, uint32_t width, int32_t x1, int32_t x2, int32_t y1, int32_t y2, bool average, float cdelt3);
    extern void data_to_luminance_f16_legacy(int16_t * cubeData, uint8_t * mask, float bzero, float bscale, float dmin, float dmax, float lmin, float lmax, uint8_t * pixels, uint32_t total_size);
    extern void data_to_luminance_f16_linear(int16_t * cubeData, uint8_t * mask, float bzero, float bscale, float black, float slope, uint8_t * pixels, uint32_t total_size);
    extern void data_to_luminance_f16_logistic(int16_t * cubeData, uint8_t * mask, float bzero, float bscale, float median, float sensitivity, uint8_t * pixels, uint32_t total_size);
    extern void data_to_luminance_f16_ratio(int16_t * cubeData, uint8_t * mask, float bzero, float bscale, float black, float sensitivity, uint8_t * pixels, uint32_t total_size);
    extern void data_to_luminance_f16_square(int16_t * cubeData, uint8_t * mask, float bzero, float bscale, float black, float sensitivity, uint8_t * pixels, uint32_t total_size);
    extern void join_pixels_masks(float * pixels, float * pixels_tid, uint8_t * mask, uint8_t * mask_tid, float cdelt3, uint32_t total_size);
    extern void make_image_spectrumF16_minmax(int16_t * fitsData, float bzero, float bscale, float datamin, float datamax, float cdelt3, float * pixels, uint8_t * mask, uint32_t total_size, float * references);
    extern void rgb_to_yuv(uint8_t * _r, uint8_t * _g, uint8_t * _b, uint32_t total_size);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus

#endif // ISPC_NATIVE_FITS_H
